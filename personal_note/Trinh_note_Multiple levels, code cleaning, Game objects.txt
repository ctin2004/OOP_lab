TRINH NOTE

[Multiple levels]

* Statistics modification
- modify map 1, map 3 (will change more later)

- Player:
+ aniSpeed: 25 -> 35 (slow down)
+ playerSpeed: 1.0f -> 0.5f 
+ gravity: 0.04f -> 0.03f
+ fallSpeedAfterCollision: 0.5f -> 0.1f

- Enemy:
+ aniSpeed: 25 -> 35
+ walkSpeed: 0.35f -> 0.25f


1/ fix bugs: 
- add 1 Crabby in lvl 1
- enemies moving on floor (checking for moving right in HelpMethods class)
- wrong attacking of Crabby (fix canSeePlayer -> isPlayerCloseForAttack)
- pausing button (add resetAll() and unpauGame() in case replayB in  mouseReleased) 
- add requestFocusable(true) in Game ctor

2/ Add multiple levels to the game:
- LevelCompletedOverlay class in ui package: 
  + create botton menu, next
  + initImg() and initButton()
  + based on img of button: next row 0, menu row 2
  + animated the buttons when mouse is in and clicked (becareful of setMouseOver() in mouseMoved() )

* Get all levels(1, 2, 3)
- replace level_one_long by img of lvls 1, 2, 3
- create method BufferedImage[] getAllLevels():
  + URL, File, .toURI
  + make file array, sorted file array to store name of level (1,2,3,...)
  + BufferedImage[] imgs array to read and store img 

* Modify in Level class 
- calculate max level offset of each level (level will change in width when moving)
- replace GetLevelDate() & GetCrabs() from LoadSave class, put it in HelpMethods class, fixing with parameter is BufferedImage of the level
- create 3 methods in Level class: createLevel(), createEnemies(), calcLvlOffsets()

* Modify in LevelManager class
- load levels imgs to an array named levels


3/ LevelManager
- create ArrayList<Level>, levelIndex
- buildAllLevels(): create array of BufferedImage[] allLevels to store all imgs of level datas, then add it one by one to the ArrayList<Level> levels of the LevelManager class
** to getResource: URL url = LoadSave.class.getResource("/utilz/res/lvls");

4/ Player spawn (using green color 100)
- Point playerSpawn: position of player at each level

*Note:
- height of level: 14 tiles (pixels)
- minimum width of level: 26 tiles (pixels)
- name of levels: 1.png, 2.png, 3.png
- player spawn in level, at least one enemy in each level
---------------------------------------------------------------------------
[Cleaning code]

1/ gravity
- static final GRAVITY moves to Constant class (both Enemy and Player have gravity)

2/ aniSpeed
- static final int ANISPEED moves to Contant class 

3/ aniTick, aniIndex
- move aniTick & aniIndex to Entity class and make it protected so that subclasses Enemy and Player can use.

4/ PlayerAction / EnemyState
- Both enemyState & playerAction is represented as state => create 'state' to Entity class and make it protected
- remove getter state method => make a getter state method in Entity class

5/ up/ down
- remove up, down in Player class

6/ airSpeed/ fallSpeed
- remove Player airSpeed, Enemy fallSpeed, make airSpped in Entity

7/ inAir

8/ Health
- maxHealth and currentHealth in Entity class (but Player = 0.05f, Enemy = 0.025f)

9/ attackBox
- make protected attackBox in Entity class

10. walkSpeed
- add walkSpeed in Entity class, modify in Player and Enemy class 

11. initHitbox
- x, y never change even in Player or Enemy => remove x, y parameters from initHitbox() 
- remove initHitbox in Enemy and keep it in Crabby class
- modify parameters in initHitbox

12. drawAttackBox
- move to Entity class, make it protected

13. getAniIndex
- move to Entity class
---------------------------------------------------------------------------
[Objects 1]

- import img of objects (barrels, potion)

- package objects, super class GameObject (not confused with Object class in Java)

* GameObject class:
- x, y, objType, hitbox
- boolean doAnimation (boxes get animated when being destroyed)
- boolean active (after picked up, destroyed => not active anymore)
- aniTick, aniIndex 
- xDrawOffset, yDrawOffset

- copy method initHitbox, drawHitbox
- modify method updateAnimationTick
- add reset()

* Constants class -> ObjectConstants class
+ give value for each types of objects (potion, box, barrel)
+ give value for types of potion properties (health, power)
( becareful that GetSpriteAmount in ObjectConstants and in PlayerConstants are same name => import the correct package)
+ set size for container and potion

* GameObject class
+ modify updateAniTick(): destroy box, barrel => stop animation
+ modify reset(): 

* Potion class extends GameObject:
( why xDrawOffet = 3, yDrawOffset = 2?) => sprite atlas has 3 pixels in x, 2 pixels in y

* Container class extends GameObject:
- createHitbox() for 2 different types: box, barrel

* ObjectManager class: 
- contain Playing, imgs for potion, container
- ArrayList to store Potion, Container
- loadImgs()
- update()
- draw(Graphics): 
	- drawContainer():
		+ x: hitbox.x - xDrawOffset - xLvlOffset
		+ y: hitbox.y - yDrawOffset

* Playing class:
- has ObjectManager class in initClasses() 
- add to draw() and update() (* when draw such as enemies, objects,... in Playing class, consider the xLvlOffset)
---------------------------------------------------------------------------
[Objects 2]

- edit map: add objects to the map

* Level class:
- add ArrayList<> potion, container (becafreful with Containers class in java.awt)
- getPotions() and getContainers() in HelpMethods
* LevelManager class:
- modify in some classes
* Error: objects not on the floor => no offset => fix

* interactive objects

* hover effect on potions
- hoverOffset: 0.75f -> 0.1f
- fix potion from destroying box: modify in ObjectManager in checkObjectHit()
